@page "/"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthService AuthService
@using Frontend.Models


<input type="text" placeholder="Pretraga" @bind="searchTerm" class="search-input" />
<select @bind="selectedStatus" class="status-select">
    <option value="">Svi statusi</option>
    @foreach (var status in Enum.GetValues<StatusPosiljke>())
    {
        <option value="@status">@status</option>
    }
</select>

<table class="shipment-table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Naziv</th>
            <th>Status</th>
            <th>Datum kreiranja</th>
            <th>Datum isporuke</th>
            <th>Akcije</th>
            <th>Detalji</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var posiljka in filteredPosiljke)
        {
            <tr>
                <td>@posiljka.Id</td>
                <td>@posiljka.Naziv</td>
                <td>@posiljka.Status</td>
                <td>@posiljka.DatumKreiranja.ToString("dd.MM.yyyy")</td> 
                <td>@posiljka.DatumIsporuke?.ToString("dd.MM.yyyy")</td> 
                <td>
                    @if (AuthService.IsLoggedIn)
                    {
                        <button class="btn btn-warning" @onclick="() => NavigateToAddEdit(posiljka.Id)">Izmeni</button>
                        <button class="btn btn-danger" @onclick="() => Delete(posiljka.Id)">Obriši</button>
                    }
                </td>
                <td>
                    <button class="btn btn-info" @onclick="() => NavigateToDetails(posiljka.Id)">Detalji</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (AuthService.IsLoggedIn)
{
    <button class="btn btn-primary" @onclick="NavigateToAdd">Dodaj novu pošiljku</button>
}

@code {
    private List<Posiljka> posiljke = new();
    private string searchTerm = string.Empty;
    private StatusPosiljke? selectedStatus = null;

    private IEnumerable<Posiljka> filteredPosiljke => posiljke
    .Where(p => 
        (string.IsNullOrWhiteSpace(searchTerm) || p.Naziv.Equals(searchTerm, StringComparison.OrdinalIgnoreCase))  
        && (selectedStatus == null || p.Status == selectedStatus)); 

    protected override async Task OnInitializedAsync()
    {
        AuthService.OnAuthStateChanged += StateHasChanged;  
        await AuthService.CheckLoginStatusAsync();  
        posiljke = await Http.GetFromJsonAsync<List<Posiljka>>("/api/posiljke");
    }

    private async Task Delete(Guid id)
    {
        await Http.DeleteAsync($"/api/posiljke/{id}");
        posiljke.RemoveAll(p => p.Id == id);
    }

    private void NavigateToDetails(Guid id)
    {
        Navigation.NavigateTo($"/detalji/{id}");
    }

    private void NavigateToAdd()
    {
        Navigation.NavigateTo("/addEdit");
    }

    private void NavigateToAddEdit(Guid id)
    {
        Navigation.NavigateTo($"/addEdit/{id}");
    }

    public void Dispose()
    {
        AuthService.OnAuthStateChanged -= StateHasChanged;  
}

}

