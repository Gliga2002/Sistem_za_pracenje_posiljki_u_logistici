@page "/addEdit/{Id:guid?}"
@using Frontend.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>@(Id == null ? "Dodaj novu pošiljku" : "Izmeni pošiljku")</h3>

<EditForm Model="posiljka" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="naziv">Naziv</label>
        <InputText id="naziv" @bind-Value="posiljka.Naziv" class="form-control"/>
        <ValidationMessage For="@(() => posiljka.Naziv)" />
    </div>

    <div class="form-group">
        <label for="status">Status</label>
        <InputSelect id="status" @bind-Value="posiljka.Status" class="form-control">
            @foreach (var status in Enum.GetValues<StatusPosiljke>())
            {
                <option value="@status">@status</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => posiljka.Status)" />
    </div>

    <div class="form-group">
        <label for="datumKreiranja">Datum kreiranja</label>
        <InputDate id="datumKreiranja" @bind-Value="posiljka.DatumKreiranja" class="form-control"/>
        <ValidationMessage For="@(() => posiljka.DatumKreiranja)" />
    </div>

    <div class="form-group">
        <label for="datumIsporuke">Datum isporuke</label>
        <InputDate id="datumIsporuke" @bind-Value="posiljka.DatumIsporuke" class="form-control"/>
        <ValidationMessage For="@(() => posiljka.DatumIsporuke)" />
    </div>

    <button class="btn btn-primary" type="submit">Sacuvaj</button>
</EditForm>

@code {
    [Parameter]
    public Guid? Id { get; set; } // ID je opcionalan

    private Posiljka posiljka = new();

    protected override async Task OnInitializedAsync()
    {
        // Ako postoji ID, učitavamo podatke sa servera
        if (Id.HasValue)
        {
            posiljka = await Http.GetFromJsonAsync<Posiljka>($"/api/posiljke/{Id}");
        }
    }

    private async Task HandleValidSubmit()
    {
        if (Id.HasValue)
        {
            await Http.PutAsJsonAsync($"/api/posiljke/{Id}", posiljka); // Ažuriraj postojeću pošiljku
        }
        else
        {
            await Http.PostAsJsonAsync("/api/posiljke", posiljka); // Dodaj novu pošiljku
        }

        Navigation.NavigateTo("/");
    }
}